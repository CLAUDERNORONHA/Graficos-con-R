[
["funciones-auxiliares.html", "Chapter 8 Funciones auxiliares 8.1 Función segments 8.2 Función rect 8.3 Función polygon 8.4 Para dibujar un círculo 8.5 Función arrows 8.6 Función grid 8.7 Función points 8.8 Función curve EJERCICIOS", " Chapter 8 Funciones auxiliares En este capítulo se presentan funciones auxiliares que son útiles para complementar los gráficos generados en . 8.1 Función segments Esta función es muy útil para digujar segmentos. La estructura de la función se muestra a continuación. segments(x0, y0, x1 = x0, y1 = y0, ...) Los argumentos de la función son: xo, yo: coordenadas del punto de inicio del segmento. x1, y1: coordenadas del punto de fin del segmento. ...: otros parámetros gráficos. A continuación de muestra el código para dibujar con segmentos la sigla de la Universidad Nacional de Colombia (UN), en la Figura 8.1 se puede ver el resultado. plot(c(-11, 3), c(-10, 10), type=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;) grid() segments(-9, 9, -9, -9, lwd=4, col=3) segments(-9, -9, -5, -9, lwd=4, col=3) segments(-5, -9, -5, 9, lwd=4, col=3) segments(-4, -9, -4, 9, lwd=4) segments(-4, 9, 0, -9, lwd=4) segments(0, -9, 0, 9, lwd=4) FIGURE 8.1: Ejemplos de segmentos. 8.2 Función rect Esta función es muy útil para digujar rectángulos. La estructura de la función se muestra a continuación. rect(xleft, ybottom, xright, ytop, density = NULL, angle = 45, ...) Los argumentos de la función son: xleft: vector o escalar con la posición de x a izquierda. ybottom: vector o escalar con la posición de y abajo. xright: vector o escalar con la posición de x a derecha. ytop: vector o escalar con la posición de y arriba. density: número de líneas por pulgada con la cuales se rellenará el rectángulo. angle: ángulo de inclinación de la líneas de relleno. col: color para el fondo del rectángulo. border: color para el borde del rectángulo, un valor posible es 'transparent' cuando no se desea borde. ...: otros parámetros gráficos. En la Figura 8.2 se muestran 7 rectángulos de ejemplo que fueron obtenidos al variar los parámetros de la función rect, a continuación el código usado para obtener esa figura. plot(NA, xlim=c(10, 20), ylim=c(10, 30), las=1, xlab=&#39;&#39;, ylab=&#39;&#39;) rect(10, 28, 12, 30) rect(11, 25, 13, 27, col=&#39;red&#39;) rect(12, 22, 14, 24, density=5) rect(13, 19, 15, 21, density=5, angle=15) rect(14, 16, 16, 18, col=&#39;pink&#39;, border=&#39;blue&#39;) rect(15, 13, 17, 15, lty=&#39;dashed&#39;) rect(16, 10, 18, 12, lwd=3) text(14, 26, &quot;col=&#39;red&#39;&quot;) text(15, 23, &quot;density=5&quot;) text(17, 20, &quot;density=5, angle=15&quot;) text(18.2, 17, &quot;col=&#39;pink&#39;, border=&#39;blue&#39;&quot;) text(18.2, 14, &quot;lty=&#39;dashed&#39;&quot;) text(18.8, 11, &quot;lwd=3&quot;) FIGURE 8.2: Ejemplos de rectángulos. El código mostrado abajo pertenece a la ayuda de la función rect y el resultado es la Figura 8.3. De esta figura se observa que es posible dibujar varios rectángulos ingresando las coordenadas como vectores. ## set up the plot region: plot(c(100, 250), c(300, 450), type=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;, main=&quot;2 x 11 rectangles; &#39;rect(100+i,300+i, 150+i,380+i)&#39;&quot;) i &lt;- 4*(0:10) ## draw rectangles with bottom left (100, 300)+i ## and top right (150, 380)+i rect(100+i, 300+i, 150+i, 380+i, col=rainbow(11, start=0.7, end=0.1)) rect(240-i, 320+i, 250-i, 410+i, col=heat.colors(11), lwd=i/5) FIGURE 8.3: Ejemplo de rectángulos obtenidos con rect. 8.3 Función polygon Esta función es muy útil para digujar polígonos. La estructura de la función se muestra a continuación. polygon(x, y, density = NULL, angle = 45, border, col, lty, ...) Los argumentos de la función son: x, y: vectores con las coordenadas de ubicación de los puntos que forman el polígono. density: número de líneas por pulgada con la cuales se rellenará el polígono. angle: ángulo de inclinación de la líneas de relleno. border: color para el borde del polígono, un valor posible es 'transparent' cuando no se desea borde. col: color para el fondo del rectángulo. lty: tipo de línea a usar para el borde. ...: otros parámetros gráficos. A continuación se muestra como usar la función polygon para dibujar un triángulo y un cuadrilátero. En la Figura 8.4 se muestran las figuras obtenidas. plot(0:5, 0:5, type=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;) abline(v=0:5, h=0:5, col=gray(0.8), lty=&#39;dashed&#39;) polygon(x=c(0, 1, 2), y=c(1, 5, 2), # Para el triangulo col=&#39;blue&#39;, border=&#39;red&#39;, lwd=4) polygon(x=c(3, 5, 5, 2), y=c(5, 4, 1, 1), # Para el cuadrilatero col=&#39;orange&#39;, border=&#39;darkgreen&#39;, lwd=4) FIGURE 8.4: Ejemplo de formas obtenidas con polygon. 8.4 Para dibujar un círculo En la base de no hay una función específica para crear círculos, sin embargo, es posible usar unas pocas líneas para obtener el círculo con un radio y centro deseado por medio de la función polygon. A continuación se muestra el código para dibujar un círculo de radio 7 unidades con centro en el punto (-2, 1) con fondo azul claro y borde de color azul obscuro. En la Figura 8.5 se muestra el círculo solicitado. rad &lt;- 7 # Valor del radio xcenter &lt;- -2 # Coordenada en x del centro ycenter &lt;- 1 # Coordenada en y del centro plot(c(-10, 10), c(-10, 10), type=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;) theta &lt;- seq(0, 2 * pi, length = 200) polygon(x=rad * cos(theta) + xcenter, y=rad * sin(theta) + ycenter, lwd=3, col=&#39;steelblue1&#39;, border=&#39;steelblue4&#39;) grid() # Para incluir una cuadrícula de guía FIGURE 8.5: Ejemplo de un círculo. 8.5 Función arrows Esta función es muy útil para incluir flechas en una figura. La estructura de la función se muestra a continuación. arrows(x0, y0, x1=x0, y1=y0, length=0.25, angle=30, ...) Los argumentos de la función son: x0, y0: coordenadas de inicio de la flecha. x1, y1: coordenadas de fin de la flecha. length: longitud (en pulgadas) de los bordes de punta de la flecha, el valor por defecto es 0.25. angle: ángulo para la punta de la flecha, a mayor ángulo más abiertas las puntas. code: número entero para indicar el tipo de flecha a dibujar. El valor de 0 para una flecha sin punta (entonces no sería una flecha), el valor de 1 para una flecha apuntando al revés (no es frecuente), el valor de 2 (valor por defecto) para una flecha usual y valor de 3 para colocar puntas a ambos lados de la flecha. El valor por defecto son 30 grados. ...: otros parámetros gráficos. En la Figura 8.6 se muestran los cuatro tipos de flechas que se obtienen al variar el parámetro code de la función arrows. Note que la flecha de la derecha fue construída subiendo, pero como code=1 ella quedó bajando. plot(NA, xlab=&#39;X&#39;, ylab=&#39;Y&#39;, # Para crear un gráfico vacío xlim=c(0, 6), ylim=c(0, 5)) arrows(x0=2, y0=1, x1=4, y1=1, code=0) arrows(x0=5, y0=1, x1=5, y1=4, code=1) arrows(x0=2, y0=4, x1=4, y1=4, code=2) arrows(x0=1, y0=1, x1=1, y1=4, code=3) text(3, 0.8, &#39;code=0&#39;) text(5.4, 2.5, &#39;code=1&#39;) text(3, 4.2, &#39;code=2&#39;) text(0.6, 2.5, &#39;code=3&#39;) FIGURE 8.6: Ejemplos de flechas variando el parámetro code. En la Figura 8.7 se muestran 4 flechas para varios valores del parámetro angle, de la figura se observa que entre mayor el ángulo, la punta de la fecha es más achatada. plot(NA, xlab=&#39;X&#39;, ylab=&#39;Y&#39;, # Para crear un gráfico vacío xlim=c(0, 6), ylim=c(0, 5)) arrows(x0=1, y0=4, x1=4, y1=4) arrows(x0=1, y0=3, x1=4, y1=3, angle=45) arrows(x0=1, y0=2, x1=4, y1=2, angle=60) arrows(x0=1, y0=1, x1=4, y1=1, angle=90) text(4.5, 3, &#39;angle=45&#39;) text(4.5, 2, &#39;angle=60&#39;) text(4.5, 1, &#39;angle=90&#39;) FIGURE 8.7: Ejemplos de flechas variando el parámetro angle. 8.6 Función grid La función grid es muy útil para construir rejillas sobre un gráfico, estas rejillas se pueden usar como referencia para facilitar la interpretación o como guía para ubicar elementos en un dibujo. La estructura de la función se muestra a continuación. grid(nx = NULL, ny = nx, col = &quot;lightgray&quot;, lty = &quot;dotted&quot;, lwd = par(&quot;lwd&quot;), equilogs = TRUE) Los argumentos de la función son: nx, ny: número de celdas a dibujar tanto en el eje horizontal y vertical. col: color de la rejilla. lty: tipo de línea a usar. lwd: grosor de la rejilla. A continuación se muestran dos ejemplos de como usar grid. En el primer ejemplo se dibuja un gráfico vacío y se le agrega la rejila estándar que se puede obtener con grid() sin definir ningún parámetro. En el segundo ejemplo se tiene una rejilla que divide en 4 partes el eje horizontal (nx=3), en 4 partes el eje vertical (ny=4), de color rosado, grosor 2 y con guiones largos. Abajo el código utilizado y en la Figura 8.8 se observan los resultados. par(mfrow=c(1, 2), mar=c(2, 2, 0, 0), cex=0.5) plot(c(-10, 10), c(-10, 10), type=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;) grid() plot(c(-10, 10), c(-10, 10), type=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;) grid(nx=3, ny=4, col=&quot;pink&quot;, lwd=2, lty=&quot;longdash&quot;) FIGURE 8.8: Ejemplos de rejillas con grid. Para dibujar rejillas en puntos seleccionados por el usuario se puede utilizar el procedimiento explicado en la sección ??. 8.7 Función points Esta función es útil para agregar puntos a una figura ya creada. La estructura de la función es la siguiente. points(x, y, pch, col, cex) Los argumentos de la función son: x, y: vectores con las coordenadas de ubicación de los puntos. pch: vector numérico con el tipo de punto a usar, por defecto pch=1. col: vector con los colores para cada punto. cex: número para modificar el tamaño de los puntos, por defecto es cex=1 y al aumentar su valor aumenta el tamaño de los puntos. Los diferentes tipos de puntos que se pueden obtener al variar el parámetro pch se muestran en la Figura 8.9. FIGURE 8.9: Ejemplos de los tipos de puntos obtenidos al variar pch. Es posible usar otros símbolos personalizados en el parámetro pch, a continuación se muestra el código para incluir 5 puntos usando los símbolos @, ., $, % y w. En la Figura 8.10 se observan los 5 puntos con los símbolos usados. Observe que cuando se usó pch='.' aparece un pequeño punto, casi imperceptible, esta opción es muy usada cuando se tiene muchos puntos que se traslapan entre si. par(mar=c(2, 2, 0, 0)) plot(c(0.5, 5.5), c(0.5, 5.5), xlab=&quot;&quot;, ylab=&quot;&quot;, type=&#39;n&#39;) points(x=1:5, y=1:5, pch=c(&#39;@&#39;, &#39;.&#39;, &#39;$&#39;, &#39;%&#39;, &#39;w&#39;), col=1:5) FIGURE 8.10: Ejemplos de símbolos personalizados con pch. 8.8 Función curve Esta función sirve para dibujar una curva en un intervalo dado. La estructura de la función es la siguiente. curve(expr, from = NULL, to = NULL, n = 101, add = FALSE, type = &quot;l&quot;, xname = &quot;x&quot;, xlab = xname, ylab = NULL, log = NULL, xlim = NULL, ...) Los argumentos de la función son: expr: nombre de la función que se desea evaluar. from, to: valores mínimo y máximo donde se va a evaluar la función. n: número de puntos en los cuales se va a evaluar la función. add: valor lógico para indicar que se desea agregar la curva a un gráfico ya existente. type: tipo de línea a usar y están disponibles “blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash” o “twodash”. gfad: . sdfdsgf: . f1 &lt;- function(x) x^2 - 10 f2 &lt;- function(x) ifelse(x &lt; 1, -x^2, 5*x) curve(expr=f1, from=-2, to=5, type=&#39;l&#39;, col=&#39;blue&#39;, lwd=4, ylab=&#39;f(x)&#39;) curve(expr=f2, from=-2, to=5, type=&#39;l&#39;, col=&#39;green4&#39;, lwd=4, add=T) FIGURE 8.11: Dibujo de dos funciónes. EJERCICIOS Crear un gráfico vacío de manera que el eje horizontal tome valores desde 0 a 30 y el eje vertical valores de 0 a 20, usar los pasos de la sección ?? para construir el gráfico solicitado. Para el gráfico vacío creado en el paso anterior, agregar una rejilla o cuadrícula que pase por los valores enteros, use los pasos de la sección ?? para incluir la rejilla en los valores solicitados. El gráfico resultante de los ejercicios 1 y 2 debe ser similar al presentando en la Figura 8.12. FIGURE 8.12: Plantilla para el dibujo. Incluir en el gráfico vacío y con rejillas anterior el dibujo mostrado en la Figura 8.13. Use las funciones vistas en este capítulo para replicar el dibujo del paisaje e incluya colores para mejorar la apariencia del paisaje. FIGURE 8.13: Paisaje a dibujar. "]
]
