[
["graficos-para-varias-variables.html", "Chapter 4 Gráficos para varias variables 4.1 Función plot 4.2 Función persp 4.3 Función pairs 4.4 Función contour ", " Chapter 4 Gráficos para varias variables En este capítulo se presentan funciones para la creación de gráficos que involucran varias variables. 4.1 Función plot Los gráficos de dispersión son muy útiles porque permiten ver la relación que existe entre dos variables cuantitativas, la función plot permite crear este tipo de gráficos. La estructura de la función plot con los argumentos más usuales se muestran a continuación plot(x, y, type, main, sub, xlab, ylab) Los argumentos de la función plot son: x: vector numérico con las coordenadas del eje horizontal. y: vector numérico con las coordenadas del eje vertical type: tipo de gráfico a dibujar. Las opciones son: 'p' para obtener puntos, esta es la opción por defecto. 'l' para obtener líneas. 'b' para obtener los puntos y líneas que unen los puntos. 'c' para obtener sólo las líneas y dejando los espacios donde estaban los puntos obtenidos con la opción 'b'. 'o' para obtener los puntos y lineas superpuestas. 'h' para obtener líneas verticales desde el origen hasta el valor \\(y_i\\) de cada punto, similar a un histograma. 's' para obtener escalones. 'S' similar al anterior. 'n' para que no dibuje. ...: otros parámetros gráficos que pueden ser pasados como argumentos para plot. Ejemplo Crear 16 parejas de puntos tales que \\(x=-5, -4, \\ldots, 9, 10\\) con \\(y=-10+(x-3)^2\\), dibujar los nueve diagramas de dispersión de \\(y\\) contra \\(x\\) usando todos los valores posibles para el parámetro type. A continuación se muestra el código para crear las 16 parejas de \\(x\\) e \\(y\\). Los nueve diagramas de dispersión se observan en la Figura 4.1, de esta figura se observa claramente el efecto que tiene el parámetro type en la construcción del diagrama de dispersión. x &lt;- -5:10 y &lt;- -10 + (x-3)^2 par(mfrow=c(3, 3)) plot(x=x, y=y, type=&#39;p&#39;, main=&quot;con type=&#39;p&#39;&quot;) plot(x=x, y=y, type=&#39;l&#39;, main=&quot;con type=&#39;l&#39;&quot;) plot(x=x, y=y, type=&#39;b&#39;, main=&quot;con type=&#39;b&#39;&quot;) plot(x=x, y=y, type=&#39;c&#39;, main=&quot;con type=&#39;c&#39;&quot;) plot(x=x, y=y, type=&#39;o&#39;, main=&quot;con type=&#39;o&#39;&quot;) plot(x=x, y=y, type=&#39;h&#39;, main=&quot;con type=&#39;h&#39;&quot;) plot(x=x, y=y, type=&#39;s&#39;, main=&quot;con type=&#39;s&#39;&quot;) plot(x=x, y=y, type=&#39;S&#39;, main=&quot;con type=&#39;S&#39;&quot;) plot(x=x, y=y, type=&#39;n&#39;, main=&quot;con type=&#39;n&#39;&quot;) FIGURE 4.1: Efecto del parámetro type en la función plot. Ejemplo Como ilustración vamos a crear un diagrama de dispersión entre el precio de apartamentos usados en la ciudad de Medellín y el área de los apartamentos. El código necesario para cargar la base de datos y construir el diagrama de dispersión se muestra a continuación. url &lt;- &#39;https://raw.githubusercontent.com/fhernanb/datos/master/aptos2015&#39; datos &lt;- read.table(file=url, header=T) par(mfrow=c(1, 2)) plot(x=datos$mt2, y=datos$precio) plot(x=datos$mt2, y=datos$precio, pch=&#39;.&#39;, xlab=&#39;Área del apartamento (m2)&#39;, ylab=&#39;Precio (millones de pesos)&#39;) FIGURE 4.2: Diagrama de dispersión del precio del apartamento versus área del apartamento. A la izquierda el diagrama de dispersión sin editar y a la derecha el diagrama de dispersión mejorado En la Figura 4.2 se presenta el diagrama de dispersión entre precio y área de los apartamentos, de este diagrama se observa claramente que a medida que los apartamentos tienen mayor área el precio promedio y la variabilidad del precio aumentan. Para el diagrama de dispersión de la derecha se usó el parámetro pch='.' con el objetivo de obtener pequeños puntos que representen cada apartamento y que no se traslapen debido a que se tienen 694 observaciones en la base de datos. 4.2 Función persp La función persp dibuja superfices en tres dimensiones y es posible rotar la superficie para obtener una perpectiva apropiada. La estructura de la función persp con los argumentos más usuales se muestran a continuación. persp(x, y, z, main, sub, theta, phi, r, col, border, box, axes, nticks) Los argumentos de la función plot son: x: vector numérico con los valores de \\(x\\) donde fue evaluada la función o superficie. y: vector numérico con los valores de \\(y\\) donde fue evaluada la función o superficie. z: matriz que contiene las alturas \\(z\\) de la supercifie para cada combinación de \\(x\\) e \\(y\\). main: vector numérico con las coordenadas del eje vertical. sub: vector numérico con las coordenadas del eje vertical. theta, phi: ángulo para la visión de la superficie, theta para la dirección azimutal y phi para latitud. Ver Figura 4.3 para una ilustración de los ángulos. r: distancia entre el centro de la caja de dibujo al punto de vista. col: color de la superficie. border: color para el borde de la superficie. box: valor lógico para indicar si se quiere dibujar la caja que contiene la superficie, por defecto es TRUE. axes: valor lógico para indicar si se desean marcas en los ejes y nombres de los ejes, por defecto es TRUE. Si box='FALSE' no aparecen marcas ni nombres de los ejes. expand: factor de expansión aplicado a los valores en el eje z. ticktype: tipo de marcas a colocar en los ejes, simple no dibuja nada y detailed coloca números a los ejes. nticks: número aproximado de marcas en los ejes. FIGURE 4.3: Ilustración de los angulos theta y phi para la función persp. Figura tomada de https://i-msdn.sec.s-msft.com/dynimg/IC412528.png Ejemplo Dibujar la superficie asociada a la función \\(f(x, y)=sen(x^2+y^2)\\) para \\(-2 \\leq x \\leq2\\) y \\(-2 \\leq y \\leq2\\). Usar 4 combinaciones de los parámetros theta y phi para obtener un buen punto de vista de la superficie. Lo primero que se debe hacer es crear la función \\(f(x, y)\\) la cual se va a llamar fun. Luego se definen los vectores x e y tomando por ejemplo 25 puntos equiespaciados en el intervalo \\([-2, 2]\\). Luego se usa la función outer para crear la rejilla o matriz que contiene los valores de \\(f(x, y)\\) para cada combinación de x e y, los resultados se almacenan en el objeto z. Por último se dibujan 4 perspectivas de la función variando los parámetros theta y phi de la función persp. A continuación el código utilizado. fun &lt;- function(x, y) sin(x^2 + y^2) x &lt;- seq(from=-2, to=2, length.out=25) y &lt;- seq(from=-2, to=2, length.out=25) z &lt;- outer(x, y, fun) par(mfrow=c(2, 2), mar=c(1, 1, 2, 1)) persp(x, y, z, zlim=c(-1, 1.5), theta=0, phi=0, col=&#39;aquamarine&#39;, main=&#39;(A) theta=0, phi=0&#39;) persp(x, y, z, zlim=c(-1, 1.5), theta=15, phi=15, col=&#39;lightpink&#39;, main=&#39;(B) theta=15, phi=15&#39;) persp(x, y, z, zlim=c(-1, 1.5), theta=45, phi=30, col=&#39;yellow1&#39;, main=&#39;(c) theta=45, phi=30&#39;) persp(x, y, z, zlim=c(-1, 1.5), theta=60, phi=50, col=&#39;lightblue&#39;, main=&#39;(D) theta=60, phi=50&#39;) FIGURE 4.4: Superficie generada con persp y diferentes valores de theta y phi. En la Figura 4.4 se presentan las 4 perspectivas de la función \\(f(x, y)=sen(x^2+y^2)\\). De los 4 páneles se nota que (C) y (D) muestran mejor la superficie de interés. Al aumentar el valor del parámetro length.out en la creación de los vectores x e y se obtendrá una rejilla más tupida, se recomienda modificar este valor para obtener una superficie apropiada. Ejemplo Dibujar la superficie de una distribución normal bivariada con vector de medias \\(\\boldsymbol{\\mu}=(5, 12)^\\top\\), varianzas unitarias y covarianza con valor de -0.8. Explorar el efecto de los parámetros ticktype, nticks, expand, axes y box. Primero se define el vector de medias y la matriz de varianzas y covarianzas, luego se carga el paquete mvtnorm que contiene la función dmvnorm que calcula la densidad dado el vector de medias y la matriz de varianzas y covarianzas. Se construye la función fun y se vectoriza para luego obtener las alturas de la superficie con la ayuda de outer. Por último se dibujan tres perspectivas diferentes para la densidad modificando los parámetros ticktype, nticks, expand, axes y box, a continuación el código usado. media &lt;- c(5, 12) varianza &lt;- matrix(c(1, -0.8, -0.8, 1), ncol=2) require(mvtnorm) fun &lt;- function(x, y) dmvnorm(c(x, y), mean=media, sigma=varianza) fun &lt;- Vectorize(fun) x &lt;- seq(from=2, to=8, length.out=30) y &lt;- seq(from=9, to=15, length.out=30) z &lt;- outer(x, y, fun) par(mfrow=c(1, 3), mar=c(1, 1, 2, 1)) persp(x, y, z, theta=30, phi=30, ticktype = &quot;detailed&quot;, nticks=4) persp(x, y, z, theta=30, phi=30, col=&#39;salmon1&#39;, expand=0.5, axes=FALSE) persp(x, y, z, theta=30, phi=30, col=&#39;springgreen1&#39;, expand=0.2, box=FALSE) FIGURE 4.5: Distribución normal bivariada. En la Figura 4.5 se presentan las 3 perspectivas para la densidad. Note los efectos que ticktype, nticks, expand, axes y box tienen sobre los dibujos de las perspectivas. 4.3 Función pairs Las matrices de dispersión proporcionan un método simple de presentar las relaciones entre pares de variables, y es la versión múltiple de {plot()}. Consiste en una matriz donde cada entrada presenta un gráfico de dispersión sencillo. Un inconveniente es que si tenemos muchas variables el tamaño de cada entrada se reduce demasiado impidiendo ver con claridad las relaciones entre los pares de variables.\\ La celda \\((i,j)\\) de una matriz de dispersión contiene el scatterplot de la columna \\(i\\) versus la columna \\(j\\) de la matriz de datos. Este gráfico puede obtenerse mediante: 4.4 Función contour "]
]
